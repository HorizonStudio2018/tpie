2006-01-18  Jan Vahrenhold  <jan.vahrenhold@math.uni-muenster.de>

        Please note that the changes reported here only reflect
	what is visible to the user. For a more detailed account
	of what has changes internally, please consult the CVS log.

	The files for testing bkdtree, convex_hull, list_rank, and
	nas_benchmarks have been moved to the apps/ directoy.

	An per-file-account follows:
	
	* app_config.h: Changed the BLOCK_FACTOR defaults for streams on
	WIN32 to 4, since the os block size is 64k .
	
	Added the BTE_COLLECTION_MMAP_LAZY_WRITE parameter.
	

	* app_config.cpp: Changed default verbosity flag to false.


	* getopts.h/getopts.cpp: These two files have been added
	to the TPIE distribution.

	/* getopts.cpp - Command line argument parser
         *
         * Whom: Steve Mertz <steve@dragon-ware.com>
         * Date: 20010111
         * Why:  Because I couldn't find one that I liked. So I wrote this one.
         *
         */


	* sample_pgm.cpp: Updates to make sample_pgm more user friendly
	to first-timers.  

	Changed persistency statement, since we do not want leftover files
	in the temp-dir.


	* scan_random.h/scan_random.cpp: Resolved ambiguos min/max in
	initializers by renaming the attribute max to m_max. 


	* scan_universal.h: This file is new and contains definitions used
	in test_correctness.cpp. 


	* test_ami_sort.cpp: Removed the function-based sort test since
	it has been permanently removed from the TPIE sort.


	* test_ami_sort24.cpp: Set the persistency flag of amis0 to
	PERSIST_DELETE, so that no files are left behind at the end,
	unless requested.


	* test_big_scan.cpp: This file is new. It creates a stream of
	given size and reads it back. Useful for testing for 2GB and 4GB 
	filesystem support.


	* test_correctness.cpp: The new file provides a test suite for
	TPIE functionality. It tests AMI_stream, AMI_scan, AMI_scan-cxx 
	functionality as well as large-file support.


	* test_sort.cpp: A new sort test program to test the new features
	of the overhauled sort.



	* General Changes (applied to all files):
    
	 * Replaced getopt mechanism with getopts, which is more
	   flexible. 
	
         * Update of the TPIE library to work with 64-bit data types.
          This includes:
          -  Introduction of TPIE_OS_SIZE_T typedef (0...M-1)
             This replaces size_t variables. The exact type
             may be set using TPIE_OS_SMALL_MEMORY.
           - Consistent use of TPIE_OS_OFFSET typedef (0...N-1)
             This replaces off_t, unsinged int, long long etc. used by
             various programmers.
           - Compile-time-check for potential "loss-of-data" problems
             when using 64-bit data types. 

         * Added portability code and changed typedefs and/or
           function names as necessary.

	 * The following does not apply to test_ami_btree.cpp:
	
           Updated code to get rid of warnings that appeared when using
           one of the following gcc compiler directives (description
           are taken from the gcc man page):

           -Wall 

           -Wabi (C++ only)
            Warn when G++ generates code that is probably not compatible with
            the vendor-neutral C++ ABI.  Although an effort has been made to
            warn about all such cases, there are probably some cases that are
            not warned about, even though G++ is generating incompatible code.
            There may also be cases where warnings are emitted even though the
            code that is generated will be compatible.

           -Wold-style-cast (C++ only)
            Warn if an old-style (C-style) cast to a non-void type is used
            within a C++ program.  The new-style casts (static_cast, reinter-
            pret_cast, and const_cast) are less vulnerable to unintended
            effects and much easier to search for.

           -Woverloaded-virtual (C++ only)
            Warn when a function declaration hides virtual functions from a
            base class. 

           -Weffc++ (C++ only)
            Warn about violations of the following style guidelines from
            Scott Meyers' Effective C++ book:

           *   Item 11:  Define a copy constructor and an assignment operator
               for classes with dynamically allocated memory.

           *   Item 12:  Prefer initialization to assignment in constructors.

           *   Item 14:  Make destructors virtual in base classes.

           *   Item 15:  Have "operator=" return a reference to *this.

           *   Item 23:  Don't try to return a reference when you must return
               an object.

           Also warn about violations of the following style guidelines from
           Scott Meyers' More Effective C++ book:

           *   Item 6:  Distinguish between prefix and postfix forms of incre-
               ment and decrement operators.

           *   Item 7:  Never overload "&&", "||", or ",".


	
Fri Jan 25 17:58 2002 Octavian Procopiuc (tavi)

	* magic_tpie: initial revision. To be used with the UNIX file(1)
	utility for checking TPIE file types.
	
	* test_ami_sort.cpp: Much nicer interface, usage printing.
	
	* test_ami_btree.cpp: Now has the option of leaving the files on
	disk after finishing, by giving a name on the command line. 

	* Makefile.in: Big overhaul. No more .d files! Makefile now
	creates a file called Makefile.depend for all automatically 
	generated dependencies.	


Thu May 22 22:49 1997 Lars Arge	(large)

	* There is a big hole in time here, but now we start describing
	changes again!


Fri Jun 10 16:57:39 1994 dev  (dev@lazyboy)

	* lr.cpp: Initial revision


Tue Jun  7 13:19:07 1994  Darren Erik Vengroff  (dev@rhine.cs.duke.edu)

	* test_ami_merge.cpp (main): Now tests substreams.


Thu Jun  2 10:37:43 1994  Darren Erik Vengroff  (dev@rhine.cs.duke.edu)

	* test_ami_merge.cpp: Wrote it based on ami_scan.cpp to test the 
	new AMI_merge() code.

	* Makefile: Added test_ami_merge and made it the default to build.


Tue May 31 13:35:06 1994 Darren Erik Vengroff  (dev@rhine.cs.duke.edu)
		
	* ami_scan.cpp (main): Got rid of call to init_tpie_logs(), since 
	initialization is now done at construction time. 
	
