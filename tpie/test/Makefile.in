# Copyright (c) 1994 Darren Erik Vengroff

# $Id: Makefile.in,v 1.15 1994-12-16 21:14:47 darrenv Exp $

# Makefile for TPIE test applications.

# Use gmake on this Makefile.  It relies on the default rules, and 
# Use gmake -p to see the default rules.

CXX = @CXX@

TPIEINC = ../include

TPIELIBDIR = ../lib

TPIELIB = $(TPIELIBDIR)/libtpie.a

ifdef DEBUG_APPS
LOG_APPS = 1
ASSERT_DEBUG_APPS = 1
endif

CXXFLAGS = -Wall 

# Set GCXX to 1 if we are using the GNU compiler, and 0 otherwise.

GCXX = 0
ifeq ($(firstword $(CXX)),g++)
GCXX = 1
endif
ifeq ($(firstword $(CXX)),c++)
GCXX = 1
endif

# Use -fno-implicit-templates with the GNU compiler.  This is necessary 
# until it starts using a seperate pass to instantiate template functions. 

ifeq ($(GCXX),1)
override CXXFLAGS += -fno-implicit-templates
override CPPFLAGS += -DNO_IMPLICIT_TEMPLATES
endif

# Try GNU's exception handler.
# ifeq ($(GCXX),1)
# override CXXFLAGS += -fhandle-exceptions
# override CPPFLAGS += -DHANDLE_EXCEPTIONS
# endif

# Get the proper include path and DEFS from the configure script.
override CPPFLAGS += -I$(TPIEINC) @DEFS@


# The loader in OSF 1.x is flakey.  Using -lm generates an executable
# that /bin/loader refuses to load, so we just load the library
# explicitly.
#
# I've tried this on two machines, one running 1.2 and one running
# 1.3, and had the same problem.

OSF1 := @OSF1@
ifeq ($(OSF1),1)
LDLIBS =  -L$(TPIELIBDIR) -ltpie /usr/lib/libm.a
else
LDLIBS =  -L$(TPIELIBDIR) -ltpie -lm
endif

CC = @CC@
CCFLAGS = $(CXXFLAGS)

# The various test applications.

APPS := test_ami_pmerge test_ami_sort test_ami_merge test_ami_gp	\
	test_matrix test_bit_matrix test_ami_arith test_ami_matrix	\
	test_ami_matrix_pad test_ami_stack lr


# Sources to the test applications.

APPSRC = $(patsubst %,%.cpp,$(APPS))


# Other C++ sources for common support routines.

COMMONCXXSRC = parse_args.cpp app_config.cpp

OTHERCXXSRC = scan_random.cpp scan_count.cpp scan_list.cpp list_edge.cpp 	\
	perm_matrix_blocks.cpp

CXXSRC=$(APPSRC) $(COMMONCXXSRC) $(OTHERCXXSRC)

# Common objects that go into most apps.

COMMONOBJ = $(COMMONCXXSRC:.cpp=.o)

# C sources.

CSRC = int_cmp.c

# Translation rules:

%:%.o
	$(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@

#%:%.cpp
#	$(LINK.cc) $< $(LOADLIBES) $(LDLIBS) -o $@

%.d:%.cpp
	$(SHELL) -ec '$(CXX) -M $(CPPFLAGS) $< | sed '\''s/$*.o/& $@/g'\'' > $@'

%.d:%.c
	$(SHELL) -ec '$(CC) -M $(CPPFLAGS) $< | sed '\''s/$*.o/& $@/g'\'' > $@'

# Specific dependencies, explicit and automatic.

all: $(APPS)

include $(CSRC:.c=.d)

include $(CXXSRC:.cpp=.d)


# What objects each of the apps acually need.

test_ami_pmerge: test_ami_pmerge.o scan_random.o int_cmp.o $(COMMONOBJ)

test_ami_sort: test_ami_sort.o scan_random.o $(COMMONOBJ)

test_ami_merge: test_ami_merge.o scan_count.o $(COMMONOBJ)

test_ami_gp: test_ami_gp.o scan_count.o $(COMMONOBJ)

test_util_matrix: test_util_matrix.o

test_bit_matrix: test_bit_matrix.o

test_ami_arith: test_ami_arith.o scan_count.o $(COMMONOBJ)

test_ami_matrix_pad: test_ami_matrix_pad.o scan_count.o			\
	perm_matrix_blocks.o $(COMMONOBJ)

test_ami_matrix: test_ami_matrix.o scan_count.o 			\
	perm_matrix_blocks.o $(COMMONOBJ)

test_ami_stack: test_ami_stack.o $(COMMONOBJ)

lr: lr.o list_edge.o scan_list.o $(COMMONOBJ)

.PHONY : clean all

clean:
	-rm $(CSRC:.c=.d) $(CSRC:.c=.o) $(CXXSRC:.cpp=.d) $(CXXSRC:.cpp=.o)
	-rm $(APPS)



