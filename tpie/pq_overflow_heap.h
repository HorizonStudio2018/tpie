#ifndef _OPQHEAP_H_
#define _OPQHEAP_H_

#include "pq_internal_heap.h"

using namespace std;

/////////////////////////////////////////////////////////
///
///  \class OPQHeap
///  \author Lars Hvam Petersen
///
///  Overflow Priority Queue, based on a simple Heap
///
/////////////////////////////////////////////////////////
template<typename T, typename Comparator = std::less<T> >
class OPQHeap {
	public:
		/////////////////////////////////////////////////////////
		///
		/// Constructor
		///
		/// \param maxsize Maximal size of queue
		///
		/////////////////////////////////////////////////////////
		OPQHeap(TPIE_OS_SIZE_T maxsize);

		/////////////////////////////////////////////////////////
		///
		/// Destructor
		///
		/////////////////////////////////////////////////////////
		~OPQHeap();

		/////////////////////////////////////////////////////////
		///
		/// Insert an element into the priority queue
		///
		/// \param x The item
		///
		/////////////////////////////////////////////////////////
		void push(const T& x);

		/////////////////////////////////////////////////////////
		///
		/// Remove the top element from the priority queue
		///
		/////////////////////////////////////////////////////////
		void pop();

		/////////////////////////////////////////////////////////
		///
		/// See whats on the top of the priority queue
		///
		/// \return Top element
		///
		/////////////////////////////////////////////////////////
		const T& top();

		/////////////////////////////////////////////////////////
		///
		/// Returns the size of the queue
		///
		/// \return Queue size
		///
		/////////////////////////////////////////////////////////
		const TPIE_OS_SIZE_T size();

		/////////////////////////////////////////////////////////
		///
		/// Return true if queue is empty otherwise false
		///
		/// \return Boolean - empty or not
		///
		/////////////////////////////////////////////////////////
		const bool empty();

		/////////////////////////////////////////////////////////
		///
		/// The factor of the size, total, which is returned 
		/// sorted 
		///
		/////////////////////////////////////////////////////////
		static const double sorted_factor = 1; 

		/////////////////////////////////////////////////////////
		///
		/// fixme 
		///
		/// \return fixme
		///
		/////////////////////////////////////////////////////////
		const bool full();

		/////////////////////////////////////////////////////////
		///
		/// fixme
		///
		/// \return fixme
		///
		/////////////////////////////////////////////////////////
		T* sorted_array();

		/////////////////////////////////////////////////////////
		///
		/// Return size of sorted array
		///
		/// \return Size
		///
		/////////////////////////////////////////////////////////
		const TPIE_OS_SIZE_T sorted_size();

		/////////////////////////////////////////////////////////
		///
		/// Remove all elements from queue 
		///
		/////////////////////////////////////////////////////////
		void sorted_pop();

	private:
		Comparator comp_;
		Heap<T, Comparator>* h;
		TPIE_OS_SIZE_T maxsize;
		T dummy;
};

#ifndef CPPOPQHEAP
#include "pq_internal_heap.inl"
#endif

#endif
