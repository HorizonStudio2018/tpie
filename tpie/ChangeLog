2006-01-18  Jan Vahrenhold  <jan.vahrenhold@math.uni-muenster.de>

	* ami_block.h: Changes in all block and collection classes to
	reflect the fact that the BTE_collection_* classes are now
	templated. The corresponding .cpp files have been eliminated.

	
	* ami_block_base.h: Changes in all block and collection classes to
	reflect the fact that the BTE_collection_* classes are now
	templated. The corresponding .cpp files have been eliminated. 


	* ami_btree.h: Added a new member function: name(). 

	Added modify method for use with Persistent B-tree.

	Fixed insert() to not call insert_split() when a duplicate value
	is inserted.

	Fixed a missing check for empty btree in find().
	
	Added a new parameter: AMI_BTREE_UNIQUE_KEYS.
	
	Added more checks during initialization to avoid failed
	assertions.

	Added a new method: dfs_preorder for traversing the tree.

	Changed bulk loading procedure to generate full nodes, instead of
	half-full ones.

	
	* ami_coll.h: Changes in all block and collection classes to
	reflect the fact that the BTE_collection_* classes are now
	templated. The corresponding .cpp files have been eliminated. 

	Redefined AMI_collection to by a synonym of AMI_collection_single,
	and not AMI_collection_single<BTE_COLLECTION>

	
	* ami_coll_single.h:  Changes in all block and collection classes
	to reflect the fact that the BTE_collection_* classes are now 
	templated. The corresponding .cpp files have been eliminated. 

	Added a persist() method for inquiring the persistence status.

	
	* ami_err.h: Added error codes used for representing errors that
	might occur while sorting.

	
	* ami_kd_base.h/ami_kdtree.h/ami_kdbtree.h: These files are new
	and contain the code for kd-trees and kdB-trees.

	
	* ami_key.h: Added selectors to key_range.

	
	* ami_logmethod.h: This file is new. It contains the code
	for realizing the (internal and external) logarithmic method.

	
	* ami_merge.h/ami_merge_sorted_runs.h: Merge changes. 
	ami_generalized_merge changed to ami_merge. merge_sorted_runs
	moved to ami_merge_sorted_runs (in ami_merge_sorted_runs.h now too).

	
	* ami_point.h: This file is new. It contains the implementation of
	a class for points in multidimensional Euclidean space.

	
	* ami_queue.h: This file is new. It contains the implementation of
	a simple I/O efficient FIFO queue.

	
	* ami_scan_mac.h: Added better checks for stream validity for both
	input streams and output streams. 

	
	* ami_sparse_matrix.h: Eliminated dependence on comparator
	class (not used/needed). Migrated to use AMI_sort instead of
	AMI_sort_V1. 

	
	* ami_stack.h: A complete overhaul of the code.

	Class AMI_stack<T> no longer inherits from AMI_STREAM<T> but 
	instead aggregates an AMI_STREAM<T>.

	The stack now uses two main-memory blocks to maintaing the
	topmost elements (as the theory says it should).
	
 	The interface has been extended to provide "peek" functionality.

	The interface now include persistence information and main memory
	usage. 

	Added a size() method (but still provide stream_len() for
 	backwards compatibility).
	
	
	* ami_stream.h: This file used to be called
	ami_stream_single.h. It now contains code resulting from the merge
	of ami_stream_single and ami_stream_base.

	Added tell() and persist() methods.


	* ami_stream_base.h: This file and its use is deprecated. See
	ami_stream.h 

	
	* ami_stream_compatibility.h: Ensure backwards compatibility for
	AMI_STREAM (after the collapse of AMI_stream* into AMI_stream).

	
	* ami_stream_single.h: This file and its use is deprecated. See
	ami_stream.h 
	
 	
	* bte_coll.h: Changes in all block and collection classes to  
	reflect the fact that the BTE_collection_* classes are now
	templated. The corresponding .cpp files have been eliminated.


	* bte_coll_base.h: Changes in all block and collection classes to
	reflect the fact that the BTE_collection_* classes are now
	templated. The corresponding .cpp files have been
	eliminated. Updated file mapping mechanism such as to allow for
	explicit file mapping in the constructor.


	* bte_coll_mmap.h: Changes in all block and collection classes to 
	reflect the fact that the BTE_collection_* classes are now
	templated. The corresponding .cpp files have been
	eliminated. Updated file mapping mechanism such as to allow for
	explicit file mapping in the constructor. 
	

	* bte_coll_ufs.h: Changes in all block and collection classes to
	reflect the fact that the BTE_collection_* classes are now
	templated. The corresponding .cpp files have been
	eliminated. Updated file mapping mechanism such as to allow for
	explicit file mapping in the constructor.


	* bte_stack_ufs.h: This file is new and contains code for a stack
	implemented using BTE_stream_ufs. It is used by
	BTE_collection_base to implement deletions.   


	* bte_stream_base.h: Separated out bte_stream_base_generic
	and bte_stream_header to a separate file each. 
	Added a persist() method for inquiring persistence status. Merged
	functionality from subclasses into this class (this also fixed a
	bug in STDIO-seek that would allow to seek past the end of the
	file without complaining). 


	* bte_stream_base_generic.h: This file is new (see also
	bte_stream_base.h).


	* bte_stream_header.h: This file is new (see also
	bte_stream_base.h). The class defined here has become struct.


	* bte_stream_mmap.h: Changes file_length calculation in
	::grow_file. Previous version would double the file size each
	time, but this is bad for large large files. We don't want to
	double files in the GB range. If the user knows in advance that
	he/she will have a large file to write, use truncate from the
	start. Previous version of bte_stream_mmap did not allow the
	creation of large (4GB) files under solaris (and possible other
	UNIXes). 

	Cleaned up memory calculations, so that memory_usage matches
	what appears in MM_register logging. 

	Added the tell method that returns the current position in the
	stream.  

	Fixed problem in ::truncate where current item pointer does not
	get updated but it should. 

	Merged functionality into base class (see bte_stream_base.h).


	* bte_stream_stdio.h: Cleaned up memory calculations, so that
	memory_usage matches that appears in MM_register logging. 

	Merged functionality into base class (see bte_stream_base.h).

	Added the tell method that returns the current position in the
	stream.  


	* bte_stream_ufs.h: Changes file_length calculation in
	::grow_file. Previous version would double the file size each
	time, but this is bad for large large files. We don't want to
	double files in the GB range. If the user knows in advance that
	he/she will have a large file to write, use truncate from the
	start. Previous version of bte_stream_mmap did not allow the
	creation of large (4GB) files under solaris (and possible other
	UNIXes). 

	Cleaned up memory calculations, so that memory_usage matches
	what appears in MM_register logging. 

	Fixed problem in ::truncate where current item pointer does not
	get updated but it should. 

	Merged functionality into base class (see bte_stream_base.h).

	Added the tell method that returns the current position in the
	stream.  

	Modified substream constructor so each subtream gets its own file
	descriptor. Otherwise file_pointer and file descriptor file
	pointer location may not match.


	* comparator.h: Added helper classes that convert between
	different comparison types (TPIE, STL, <). 


	* internal_sort.h: Complete overhaul of previous AMI_sort
	routines. Major code rewrite, better code organization, more
	documentation, fix of memory problems, working support for merge
	depths >2, removed dependence on substreams (cost too much in
	terms of file descriptors/memory for this application).
	Support for sorting with 2x space instead of 3x plus an optional
	progress bar.  


	* matrix.h: All entries are set to zero upon initialization (using
	memset).

	
	* mergeheap.h: This file used to be mergeheap_dh.h and
	repleaces the previous mergeheap.h file. Added extract_min
	functionality to mergeheap in cases where it makes sense (not the
	key-based heaps). Delete_min_and_insert is still used for sorting,
	but for general heaps, extract_min may be a desired feature. 


	* mm_register.h: Added "pause/resume allocation counting"
	methods. 


	* persist.h: Added a fix for OSs that do not support READ_ONCE
	access.


	* portability.h: Various fixes to ensure portability (also on
	MINGW32). Use ANSI std rand/srand instead of BSD style
	random/srandom. TPIE_OS_RANDOM() now generates 31 random bits
	under WIN32 as well.
	

	* progress_indicator_base.h, progress_indicator_arrow.h,
	progress_indicator_spin.h, progress_indicator_terminal.h,
	progress_indicator_tpie.h: These files are new and provide 
	interfaces (_base, _terminal) and instantiations (_arrow, _spin,
	_tpie) for progress indicators.


	* quicksort.h: Got rid of comparison function sorting. Changed
	comparison object sorting to always test "compare < 0" just as in
	the operator sorting case.

	DEPRECATED: quick_sort_cmp
	
	Earlier TPIE versions allowed a quicksort that used a C-style
	comparison function to sort. However, comparison functions cannot
	be inlined, so each comparison requires one function call. Given
	that the comparison operator < and comparison object classes can
	be inlined and have better performance while providing the exact
	same functionality, comparison functions have been removed from
	TPIE. If you can provide us with a compelling argument on why they
	should be in here, we may consider adding them again, but you must
	demonstrate that comparision functions can outperform other
	methods in at least some cases or give an example were it is
	impossible to use a comparison operator or comparison object.



	* sort_manager.h: This file is new. The new sort_manager class
	that handles the bulk of sorting. A progress indicator can be used
	to show the progress made so far.


	* tpie_assert.h: Changed the system call assert(0) to
	assert(condition) so user will see what test failed.


	* tpie_log.h: Added a function that returns the name of the log
	file: theLogName(). Added TPIE_LOG_MEM_DEBUG debugging
	level. TPIE_LOG_DEBUG now hides memory
	allocation/deallocation. LOG_DEBUG now will not show memory
	allocation/deallocation. Use LOG_MEM_DEBUG for most verbose
	logging level.


	* tpie_tempnam.h: Changed "char* base" in tpie_tempnam to "const
	char* base" to allow const base names. Matches tempnam from
	stdio.h prototype.


	* vararray.h: This file is new and contains code for variable-size
	one-, two-, and three-dimensional arrays. These array are used for
	use with compilers that do not like variable-size arrays (such as
	"my_class myArray[aVariable]") on the stach. 


	* General Changes (applied to all files):
    
         * Update of the TPIE library to work with 64-bit data types.
          This includes:
          -  Introduction of TPIE_OS_SIZE_T typedef (0...M-1)
             This replaces size_t variables. The exact type
             may be set using TPIE_OS_SMALL_MEMORY.
           - Consistent use of TPIE_OS_OFFSET typedef (0...N-1)
             This replaces off_t, unsinged int, long long etc. used by
             various programmers.
           - Compile-time-check for potential "loss-of-data" problems
             when using 64-bit data types. 

         * Added portability code and changed typedefs and/or
           function names as necessary.

         * Updated code to get rid of warnings that appeared when using
           one of the following gcc compiler directives (description
           are taken from the gcc man page):

           -Wall 

           -Wabi (C++ only)
            Warn when G++ generates code that is probably not compatible with
            the vendor-neutral C++ ABI.  Although an effort has been made to
            warn about all such cases, there are probably some cases that are
            not warned about, even though G++ is generating incompatible code.
            There may also be cases where warnings are emitted even though the
            code that is generated will be compatible.

           -Wold-style-cast (C++ only)
            Warn if an old-style (C-style) cast to a non-void type is used
            within a C++ program.  The new-style casts (static_cast, reinter-
            pret_cast, and const_cast) are less vulnerable to unintended
            effects and much easier to search for.

           -Woverloaded-virtual (C++ only)
            Warn when a function declaration hides virtual functions from a
            base class. 

           -Weffc++ (C++ only)
            Warn about violations of the following style guidelines from
            Scott Meyers' Effective C++ book:

           *   Item 11:  Define a copy constructor and an assignment operator
               for classes with dynamically allocated memory.

           *   Item 12:  Prefer initialization to assignment in constructors.

           *   Item 14:  Make destructors virtual in base classes.

           *   Item 15:  Have "operator=" return a reference to *this.

           *   Item 23:  Don't try to return a reference when you must return
               an object.

           Also warn about violations of the following style guidelines from
           Scott Meyers' More Effective C++ book:

           *   Item 6:  Distinguish between prefix and postfix forms of incre-
               ment and decrement operators.

           *   Item 7:  Never overload "&&", "||", or ",".


Thu Aug 29 22:40:43 2002 Octavian Procopiuc (tavi)

	* ami_stream_single.h, bte_stream_base.h, bte_stream_mmap.h,
	bte_stream_ufs.h, bte_stream_stdio.h: new stats() method in
	AMI_STREAM and corresponding support in bte streams.
	
	* ami_optimized_merge.h, apm_dh.h: Changed the prefix of temporary
	files from Temp to AMI, for uniformity. 
	
	* ami_coll.h: Added AMI_collection shortcut.
	
	* bte_coll_base.h, bte_coll_ufs.h, bte_coll_mmap.h: Define and use
	bid_t to represent the block id 
	type at the bte collection level. This has to correspond
	to the AMI_bid type defined in ami_block_base.h.

	* bte_coll_mmap.h: Added BTE_COLLECTION_MMAP_LAZY_WRITE definition.

	* bte_stream_mmap.h: Modified some constants to be consistent with
	the new naming convention: BTE_STREAM_MMAP_* instead of BTE_MMB_*.

	* bte_stream_ufs.h: Modified some constants to be consistent with
	the new naming conventions: BTE_STREAM_UFS_* instead of BTE_UFS_*.

	* tpie_tempnam.h: Added a new parameter to the tpie_tempnam
	function, to specify the directory. When NULL, it defaults to
	finding a directory using the environment variables.

Sun Jun 23 22:15:58 2002 Octavian Procopiuc (tavi)
	
	* bte_stream_mmap.h: fixed a bug that was causing core dump when
	closing a read-only stream.
	
Mon Jan 14 11:33:13 2002 Octavian Procopiuc (tavi)

	* general: new naming convention: all files dealing with bte
	streams are called bte_stream* instead of bte*; all files related
	to ami streams are called ami_stream* instead of ami*; mmb streams
	are now called mmap streams; all macro definitions have been
	changed accordingly.

	* general: new statistics mechanism. Feedback is needed to refine it.
	
	* ami_stream.h: new wrapper for ami streams; replaces old ami.h,
	which now is wrapper for entire library, not just the streams
	part.

	* ami.h: now includes the ami block collection, the ami block and
	the ami btree; it is a front end to the entire library.
	
	* ami_imps.h: deprecated, moved its contents into ami_stream.h

	* ami_err.h: new file, contains the ami error codes.

	* bte_err.h: initial revision, contains the bte error codes.

	* bte.h: deprecated; moved its contents into bte_stream.h

	* bte_stream.h: initial revision, contains the old bte.h

	* mm_imps.h: deprecated; moved its contents in mm.h

	* bte_base_stream.h: deprecated; renamed bte_stream_based.h

	* ami_single.h: deprecated; renamed ami_stream_single.h

	* ami_base.h: deprecated; renamed ami_stream_base.h

	* bte_ufs.h: deprecated; renamed bte_stream_ufs.h

	* bte_mmb.h: deprecated; renamed bte_stream_mmap.h

	* bte_stdio.h: deprecated; renamed bte_stream_stdio.h

	* ami_ptr.h: deprecated; was not used or useful

	* counter.h: deprecated; was not used or useful

	* bte_stream_ufs.h: fixed an error that was causing two blocks
	instead of one to be allocated, which caused errors in sorting
	routine.

	* bte_stream_base.h: BTE_base_stream is now called
	BTE_stream_base. Added generic base class for streams, in
	order to have global statistics. Introduced new statistics. Moved
	a lot of the header checking code from bte implementations (ufs,
	mmb) here. Moved register_memory_* functions from bte
	implementations here. get_status() is now called status(), to be
	consistent with bte collections. 

	* ami_stream_base.h: AMI_base_stream is now called
	AMI_stream_base. Reintroduced status.

	* ami_stream_single.h: introduced global statistics (counted using
	the BTE streams).

	* tpie_stats.h, tpie_stats_stream.h: initial revision; new
	statistics mechanism.
	* tpie_stats_coll.h, tpie_stats_tree.h:
	initial revision.	

	* bte_mmb_stats.h, bte_stats.h: deprecated; changed to new
	statistics mechanism (see tpie_stats*.h files.)
	
Thu May 17 19:29:14 2001 Octavian Procopiuc (tavi)

	* ami_block.h, ami_block_base.h: Initial revision.

	* bte_coll.h, bte_coll_mmb.h, bte_coll_base.h, bte_coll_ufs.h: 
	Initial revision.

	* ami_coll.h, ami_coll_base.h, ami_coll_single.h: Initial revision.

Fri Oct 22 19:12:08 1999 Octavian Procopiuc (tavi)

	* tpie_log.h: added LOG_APP_DEBUG level and corresponding macros, 
	for messages logged by applications. Also added LOG_SET_THRESHOLD 
	macro, for changing the threshold level.
	
	* quicksort.h: fixed a bug in quicksort (which allowed the recursion 
	to go all the way down, instead of stopping at a preset value, after 
	which insertion_sort would be called). Also changed the value where 
	quicksort bottoms out to 20, based on experiments on various machines.

Sun Mar 28 04:15:34 1999 Rakesh Barve (rbarve)

	* stdio_stack.h: Initial revision.
	
Wed Feb  3 13:14:55 1999 Octavian Procopiuc (tavi)

	* almost_all_files: Removed template instantiations and related macros.
	
Sun Oct 26 18:13 1997 Lars Arge (large)

	* bte_mmb.h: Same bug as in seek() fixed in truncate().

Sun Oct 26 16:10 1997 Lars Arge (large)
	
	* bte_mmb.h: Fixed a bug in seek() - check to see if correct block
	is mapped in added.
	
Thu May 22 22:40 1997 Lars Arge (large)

	* quicksort.h: Fixed an off-by-one error in all the insertion_sort
	functions. Inserted "extern "C" long int random(void)" to avoid
	warning during compilation (random() used).

	* ami_single.h: Initialized r_only variable on creation. Inserted
	seek(0) in new_substream.

	* bte_mmb.h: Changed >= to <= in write_item.

	* bte_ufs.h: Small typographical change.

	* bte_stdio.h: Quick bug-fix hack in stream_len() - need to look
	at the real problem (header block not a block) later!

	* ami_scan_mac: Removed rewind of output stream.

	
	
Thu May 22 14:47 1997 Lars Arge (large)

	* There is a bog hole in time here, but no we start describing
	changes again!


	
Thu Sep 29 13:13:15 1994  Darren Erik Vengroff  (darrenv@lazyboy)

	* quicksort.h, pqueue.h, bte_ufs.h, ami_sort_single.h, ami_ptr.h,
	ami_device.h: 
	Initial revision

	* bte_mmb.h: Added BTE_stream_mmb_base.

	* bte_base_stream.h: Added query of available streams.

	* ami_single.h: Misc. minor changes and updates.

	* ami_merge.h: AMI_partition_and_merge done and apparently working.

	* ami_imps.h:
	Got rid of AMI_IMP_STDIO, which was bogus at the AMI level and fixed
	the default to be AMI_IMP_SINGLE.

	* ami_base.h: Added AMI_ERROR_INSUFFICIENT_AVAILABLE_STREAMS.

	* Makefile: All makefiles still need work.

	* ami_sort.h: Initial revision

Thu Sep 29 09:04:13 1994  Darren Erik Vengroff  (darrenv@lazyboy.eecs.umich.edu)

	* A basic implementation of quicksort for use in core by
	AMI_sort() on streams or substreams that are small enough.

	* bte_ufs.h: It has not been tested in a while and problably needs
	updates to add new virtual functions to become functional again.

	* bte_mmb.h: Added a base class for all streams
	(BTE_stream_mmb_base) which keeps track of available streams in
	the system to avoid running out e.g. in merging.

Thu Sep 29 12:57:28 1994  Darren Erik Vengroff  (darrenv@lazyboy)

	* Makefile: All makefiles still need work.

	* ami_sort.h: Initial revision

Thu Sep 29 08:57:58 1994  Darren Erik Vengroff  (darrenv@lazyboy.eecs.umich.edu)

	* ami_base.h: Added AMI_ERROR_INSUFFICIENT_AVAILABLE_STREAMS for
	cases when the OS willl not allow us to have enough streams to
	perform an operation.

Tue Sep 27 09:29:09 1994  Darren Erik Vengroff  (darrenv@lazyboy.eecs.umich.edu)

	* Makefile (ami_scan.h): changed cp to cat > to aboid permission
	problems when ami_scan.h.head is checked in and thus read only.

Sat Sep 17 13:17:20 1994  Darren Erik Vengroff  (darrenv@lazyboy.eecs.umich.edu)

	* ami_merge.h: Added main_mem_operate() member function to class
        AMI_merge_base to handle bottoming out.
	(AMI_main_mem_merge): Broke it out of partition_and_merge() since
	it is useful in other types of merges as well.  Essestially it
	does some error checking and then calls the main_mem_operate()
	member function of the merge management object.

Wed Aug 31 13:44:48 1994  Darren Erik Vengroff  (darrenv@lazyboy.eecs.umich.edu)

	* tpie_assert.h (TP_DEBUG_OUT): changed the name form TP_DEBUG_STR
	
	(tp_assert): changed to log msg by itself so it need not be a
	string.  It can also be a sequence of items separated by <<
	operators. 

Tue Aug 30 13:17:30 1994  Darren Erik Vengroff  (darrenv@lazyboy.eecs.umich.edu)

	* bte_mmb.h (map_current): Fixed a serious bug that was setting
	current = curr_block.  This was a problem when the current block
	was invalid but the location of the current object in the stream
	was not at the beginning of the block, as in a newly created
	substream.

Fri Jun 10 11:46:10 1994  Darren Erik Vengroff  (dev@rhine.cs.duke.edu)

	* ami_scan.h.tail: Added a template for AMI_copy_stream() to
	scan using an identity object.

Wed Jun  8 09:53:21 1994  Darren Erik Vengroff  (dev@rhine.cs.duke.edu)

	* bte_mmb.h: BTE_stream_mmb is now properly declared with
	public base class BTE_base_stream so that standard pointer
	conversion is done.

	* ami_single.h: AMI_stream_single is now properly declared with
	public base class AMI_base_stream so that standard pointer
	conversion is done.

	* ami_scan_mac.h (__SPARM_BASE): Changed AMI_STREAM to
	AMI_base_stream now that sub_classes of AMI_base_stream are
	properly declared public.

	* bte_imps.h: Removed erroneous comment now that sub_classes of
	AMI_base_stream are properly declared public.

	* ami_imps.h: Removed erroneous comment now that sub_classes of
	AMI_base_stream are properly declared public.

	* ami_base.h: Added enum AMI_stream_type and added a virtual
	psuedo-constructor for substreams.

Tue Jun  7 09:57:43 1994  Darren Erik Vengroff  (dev@rhine.cs.duke.edu)

	* ami_single.h (read_item): Now returns AMI_ERROR_END_OF_STREAM if
	the BTE returns BTE_ERROR_END_OF_STREAM.

	* ami_merge.h (AMI_merge): Fixed bug where EOS from read_item was
	being returned to our called.

Mon Jun  6 09:50:16 1994  Darren Erik Vengroff  (dev@gypsum.cs.duke.edu)

	* bte_mmb.h: Added logical block size, which can be an integral
	multiple of os_blocksize.  It is currently specified via
	BTE_MMB_LOGICAL_BLOCKSIZE_FACTOR, but a more elegant mechanism
	employing an optional argument to the constructors (defaulted to a
	reasonable value) is in the works.

Fri Jun  3 14:10:41 1994  Darren Erik Vengroff  (dev@rhine.cs.duke.edu)

	* bte_stdio.h: Added simple memory manager calls to register the
	allocation and deallocation of memory for stdio streams. 

Thu Jun  2 14:11:20 1994  Darren Erik Vengroff  (dev@gypsum.cs.duke.edu)

	* bte_imps.h: #include <bte_stdio.h> now lower case.

	* bte_mmb.h (BTE_stream_mmb): Adjusted the mode argument to
	::open() in the case where we try to create a new file.

	* tpie_log.h (LOG_DEBUG_INFO): changed TP_LOG_DEBUG to
	TP_LOG_DEBUG_INFO to match enum.

Thu Jun  2 09:20:54 1994  Darren Erik Vengroff  (dev@rhine.cs.duke.edu)

	* ami.h: Now includes ami_merge.h to load the merging code.

Tue May 31 20:26:25 1994  Darren Erik Vengroff  (dev@rhine)

	* tpie_log.h, bte_mmb.h, bte_base_stream.h:
	First implementation of a simple registration based memory manager.

Tue May 31 09:24:24 1994  Darren Erik Vengroff  (dev@rhine.cs.duke.edu)

	* bte_mmb.h (register_memory_allocation): Wrote this method as an
	iterface to the MM.
	(BTE_stream_mmb): Added memory registration via
	register_memory_allocation().
	(register_memory_deallocation): Wrote it to handle deallocation.

	* bte_base_stream.h: Added a new error code
	BTE_ERROR_MEMEORY_ERROR for reporting MM errors.

Mon May 30 11:11:19 1994  Darren Erik Vengroff  (dev@rhine.cs.duke.edu)

	* bte_mmb.h: Now includes the registration based memory manager.

	* mm_imps.h: Created it.  For the moment it is just a shell that
	verifies that the registration based implementation is selected.

	* mm_base.h: Created it.  The MM_base_manager class is empty for
	the moment.

	* mm.h: Created it.  Modeled after ami.h

	* mm_register.h: Created the basics of MM_register, a simple MM
	class for BTE implementations that rely on the OS to allocate most
	of their memory.

