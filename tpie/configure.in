dnl Copyright (c) 1994 Darren Erik Vengroff
dnl
dnl File: configure.in
dnl Author: Darren Erik Vengroff <darrenv@eecs.umich.edu>
dnl Created: 10/13/94
dnl 
dnl $Id: configure.in,v 1.7 1995-03-07 14:44:12 darrenv Exp $
dnl
dnl Macro file for autoconfig for the TPIE system.
dnl 
AC_PREREQ(2.0)
AC_INIT(include/ami.h)
AC_CONFIG_HEADER(include/config.h)
AC_REVISION($Revision: 1.7 $)dnl
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_RANLIB
dnl
dnl Check for OSF/1.
define(AC_OSF,
[AC_CHECKING(for OSF/1)
AC_BEFORE([$0], [AC_COMPILE_CHECK])AC_BEFORE([$0], [AC_TEST_PROGRAM])AC_BEFORE([$0], [AC_HEADER_EGREP])AC_BEFORE([$0], [AC_TEST_CPP])AC_PROGRAM_EGREP(yes,
[#include <standards.h>
#ifdef _OSF_SOURCE
  yes
#endif
], 
AC_MSG_RESULT(detected.)
OSF1=1,
AC_MSG_RESULT(not detected.)
OSF1=0)
])dnl
AC_SUBST(OSF1)
dnl
AC_OSF
dnl Set the language to C when checking for functions so that we look
dnl for them as C functions and not as C++ functions (e.g. foo()
dnl becomes foo__Fv).
AC_LANG_C
AC_HAVE_FUNCS(mmap getrusage)
AC_LANG_CPLUSPLUS
AC_HAVE_HEADERS(strings.h string.h unistd.h sys/unistd.h)
dnl
dnl A macro for searching for prototypes in header files.
dnl Unfortunately, not all library functions have prototypes
dnl in header files on all systems.
dnl
define(AC_PROTOTYPE,
[AC_PROVIDE([$0])AC_CHECKING([for $1() prototype in $2])
AC_HEADER_EGREP($1, $2,
[AC_DEFINE(HAVE_PROTOTYPE_]translit($1,a-z,A-Z)[)])])
dnl
AC_PROTOTYPE(mmap, sys/mman.h)
AC_PROTOTYPE(munmap, sys/mman.h)
AC_PROTOTYPE(ftruncate, sys/types.h)
dnl
dnl How to check for perl and indent
dnl
AC_DEFUN(AC_PROG_PERL,
[AC_CHECK_PROG(PERL, perl, perl, )])
AC_DEFUN(AC_PROG_INDENT,
[AC_CHECK_PROG(INDENT, indent, indent, cat)])
dnl
dnl Enable or disable expansion AMI_scan.h.  Expansion is useful for
dnl debugging.
dnl
AC_CHECKING(whether to enable expansion of ami_scan.h...)
AC_ARG_ENABLE(expand-ami-scan, Expand the ami_scan.h header file,
[
AC_MSG_RESULT("enabled.")
EXPAND_AMI_SCAN_H=yes
AC_PROG_INDENT
if test [$]INDENT = cat; then
  AC_MSG_WARN(indent not found.  Using [$]INDENT)
  INDENTFLAGS=" "
else
  if ($INDENT --version >/dev/null); then
    INDENTFLAGS="-st -kr"  
  else
    AC_MSG_WARN([$]INDENT is not GNU indent.  I'll try it anyway.)
    INDENTFLAGS=" "  
  fi
fi
dnl
AC_PROG_PERL
if test "[$]PERL" = ""; then
  AC_MSG_WARN(perl not found.  Use --disable-expand-ami-scan and it is not needed.)
fi],
[EXPAND_AMI_SCAN_H=no
INDENT=" "
INDENTFLAGS=" "
AC_MSG_RESULT("disabled.")])
AC_SUBST(INDENTFLAGS)
AC_SUBST(EXPAND_AMI_SCAN_H)
dnl
dnl
dnl Enable or disable assertions and logging for the library and/or apps.
dnl
AC_CHECKING(whether to enable assertions...)
AC_ARG_ENABLE(assert-apps,Turn assertions on/off in application code.,
              AC_DEFINE(TP_ASSERT_APPS) 
	      AC_MSG_RESULT(app assertions enabled.),
	      AC_MSG_RESULT(app assertions disabled.))
AC_ARG_ENABLE(assert-lib,Turn assertions on/off in library code.,
              AC_DEFINE(TP_ASSERT_LIB)
	      AC_MSG_RESULT(lib assertions enabled.),
	      AC_MSG_RESULT(lib assertions disabled.))
AC_CHECKING(whether to enable logs...)
AC_ARG_ENABLE(log-apps,Turn logging on/off in application code.,
              AC_DEFINE(TP_LOG_APPS)
	      AC_MSG_RESULT(app logging enabled.),
	      AC_MSG_RESULT(app logging disabled.))
AC_ARG_ENABLE(log-lib,Turn logging on/off in libray code.,
	      AC_DEFINE(TP_LOG_LIB)
	      AC_MSG_RESULT(lib logging enabled.),
	      AC_MSG_RESULT(lib logging disabled.))
dnl
AC_OUTPUT(Makefile test/Makefile include/Makefile doc/Makefile lib/Makefile lib/src/Makefile)



