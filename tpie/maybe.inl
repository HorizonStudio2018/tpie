// This file was generated by gen_maybe_inl.py, do not edit

void construct() {assert_not_constructed(); object = new T();  m_constructed = true;}
template <typename T0> void construct(T0& t0) {assert_not_constructed(); object = new T(t0);  m_constructed = true;}
template <typename T0> void construct(const T0& t0) {assert_not_constructed(); object = new T(t0);  m_constructed = true;}
template <typename T0, typename T1> void construct(T0& t0, T1& t1) {assert_not_constructed(); object = new T(t0, t1);  m_constructed = true;}
template <typename T0, typename T1> void construct(const T0& t0, T1& t1) {assert_not_constructed(); object = new T(t0, t1);  m_constructed = true;}
template <typename T0, typename T1> void construct(T0& t0, const T1& t1) {assert_not_constructed(); object = new T(t0, t1);  m_constructed = true;}
template <typename T0, typename T1> void construct(const T0& t0, const T1& t1) {assert_not_constructed(); object = new T(t0, t1);  m_constructed = true;}
template <typename T0, typename T1, typename T2> void construct(T0& t0, T1& t1, T2& t2) {assert_not_constructed(); object = new T(t0, t1, t2);  m_constructed = true;}
template <typename T0, typename T1, typename T2> void construct(const T0& t0, T1& t1, T2& t2) {assert_not_constructed(); object = new T(t0, t1, t2);  m_constructed = true;}
template <typename T0, typename T1, typename T2> void construct(T0& t0, const T1& t1, T2& t2) {assert_not_constructed(); object = new T(t0, t1, t2);  m_constructed = true;}
template <typename T0, typename T1, typename T2> void construct(const T0& t0, const T1& t1, T2& t2) {assert_not_constructed(); object = new T(t0, t1, t2);  m_constructed = true;}
template <typename T0, typename T1, typename T2> void construct(T0& t0, T1& t1, const T2& t2) {assert_not_constructed(); object = new T(t0, t1, t2);  m_constructed = true;}
template <typename T0, typename T1, typename T2> void construct(const T0& t0, T1& t1, const T2& t2) {assert_not_constructed(); object = new T(t0, t1, t2);  m_constructed = true;}
template <typename T0, typename T1, typename T2> void construct(T0& t0, const T1& t1, const T2& t2) {assert_not_constructed(); object = new T(t0, t1, t2);  m_constructed = true;}
template <typename T0, typename T1, typename T2> void construct(const T0& t0, const T1& t1, const T2& t2) {assert_not_constructed(); object = new T(t0, t1, t2);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(T0& t0, T1& t1, T2& t2, T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(const T0& t0, T1& t1, T2& t2, T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(T0& t0, const T1& t1, T2& t2, T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(T0& t0, T1& t1, const T2& t2, T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(T0& t0, T1& t1, T2& t2, const T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3) {assert_not_constructed(); object = new T(t0, t1, t2, t3);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void construct(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7) {assert_not_constructed(); object = new T(t0, t1, t2, t3, t4, t5, t6, t7);  m_constructed = true;}
