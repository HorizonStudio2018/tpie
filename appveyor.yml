# Specify version format
version: "{build}"

# Operating system (build VM template)
os: Visual Studio 2015

# build platform, i.e. Win32 (instead of x86), x64, Any CPU. This setting is optional.
platform:
  - x64

# specify custom environment variables
environment:
  BOOST_ROOT: C:/Libraries/boost_1_60_0
  BOOST_LIBRARYDIR: C:/Libraries/boost_1_60_0/lib64-msvc-14.0

# build configuration, i.e. Debug, Release, etc.
configuration:
  - Debug
  - Release

# scripts that are called at very beginning, before repo cloning
init:
  - cmd: cmake --version
  - cmd: msbuild /version

# clone directory
clone_folder: C:/projects/tpie

# branches to build
branches:
  # whitelist
  # only:
  #   - master
  # blacklist
  except:
    - gh-pages

# scripts to run before build
before_build:
  - cmd: cd C:/projects/tpie
  - cmd: md build
  - cmd: cd build
  - cmd: if "%platform%"=="Win32" set CMAKE_GENERATOR_NAME=Visual Studio 14 2015
  - cmd: if "%platform%"=="x64"   set CMAKE_GENERATOR_NAME=Visual Studio 14 2015 Win64
  - cmd: cmake -G "%CMAKE_GENERATOR_NAME%" -DCMAKE_BUILD_TYPE=%configuration% -DBOOST_ROOT="%BOOST_ROOT%" -DBOOST_LIBRARYDIR="%BOOST_LIBRARYDIR%" ..

build:
  parallel: true                           # enable MSBuild parallel builds
  project: C:/projects/tpie/build/tpie.sln # path to Visual Studio solution or project

test_script:
  - cmd: cd C:/projects/tpie
  - cmd: cd build
  - cmd: ctest -T Test --timeout 30 -j 2 --output-on-failure --no-compress-output -C "%CONFIG%" ctest || ver>nul

  # From https://android.googlesource.com/platform/external/google-benchmark/+/android-7.1.1_r12/appveyor.yml
  - ps: |

      function Add-CTest-Result($testResult)
      {
          $tests = ([xml](get-content $testResult)).Site.Testing
          $testsCount = 0
          $anyFailures = $FALSE

          foreach ($test in $tests.test) {
              $testsCount++
              $testName = $test.Name
              $testpath = $test.Path
              $timeNode = $test.SelectSingleNode('Results/NamedMeasurement[@name="Execution Time"]/Value')
              if ($test.status -eq "failure") {
                  $time = ([double]$timeNode.InnerText * 1000)
                  Add-AppveyorTest $testName -Outcome Failed -FileName $testpath -Duration $time -ErrorMessage $($test.results.measurement.value)
                  Add-AppveyorMessage `"$testName failed`" -Category Error
                  $anyFailures = $TRUE
              }
              elseif ($test.status -eq "skipped") {
                  Add-AppveyorTest $testName -Outcome Ignored -Filename $testpath
              }
              else {
                  $time = ([double]$timeNode.InnerText * 1000)
                  Add-AppveyorTest $testName -Outcome Passed -FileName $testpath -Duration $time -StdOut $($test.results.measurement.value)
              }
          }
          return $testsCount, $anyFailures
      }

      $testsCount = 0
      $anyFailures = $FALSE

      # Run tests and upload results to AppVeyor one by one
      Get-ChildItem ".\Testing\*.xml" -Recurse | foreach {
          $testfile = $_.fullname
          $count, $testsResult = Add-CTest-Result $testfile
          Write-Host "Found $testfile with $count tests"
          $testsCount = $testsCount + $count
          $anyFailures = $anyFailures -or $testsResult
      }

      Write-Host "There are $testsCount tests found"

      if ($anyFailures -eq $TRUE){
          Write-Host "Failing build as there are broken tests"
          $host.SetShouldExit(1)
      }
